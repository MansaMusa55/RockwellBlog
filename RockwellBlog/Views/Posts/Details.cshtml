@using RockwellBlog.Services
@using Microsoft.AspNetCore.Identity
@inject UserManager<BlogUser> userManager
@inject IBlogFileService _fileService
@model RockwellBlog.Models.Post

@{
    ViewData["Title"] = "Details";
}

<article>
    <div class="container">
        <div class="row">
            <div class="col-lg-8 col-md-10 mx-auto">
                @Html.Raw(Model.Content)
            </div>
        </div>
    </div>
</article>

<hr />

@*Task 1: Prompt the anonymous user to login to add a comment*@
@if (!User.Identity.IsAuthenticated)
{
    <a class="btn-dark btn-block btn-sm rounded" asp-area="Identity"
       asp-page="/Account/Login"
       asp-route-returnUrl="@Url.Action("Details", "Posts", new { id = Model.Id})">Login to add a comment</a>
}
else
{
    <div class="row">
        <div class="col">
            <h3 class="text-center">ADD COMMENT</h3>
            <form asp-action="Create" asp-controller="Comments" method="post">
                <input type="hidden" name="PostId" value="@Model.Id" />
                <textarea name="Body" rows="10" class="form-control"></textarea>
                <button class="btn btn-dark btn-block btn-sm" type="submit">Submit</button>
            </form>
        </div>
    </div>
}

<hr />
<div class="btn-sm btn-dark btn-block">@Model.Comments.Count Comment(s)</div>
@foreach (var comment in Model.Comments.OrderByDescending(c => c.Created))
{
    <div class="row">
        <div class="col">
            <div class="media border p-3">
                <img src="@_fileService.DecodeImage(comment.Author.ImageData, comment.Author.ContentType)" alt="@comment.Author.FullName" class="mr-3 mt-3 rounded-circle" style="width:60px;">
                <div class="media-body">
                    <h4>@comment.Author.FullName <small><i>Posted on @comment.Created.ToString("MMM dd, yyyy")</i></small></h4>
                    <p>@comment.Body</p>
                </div>
            </div>
        </div>
    </div>
    <!--if (User.IsInRole("Administrator") || User.IsInRole("Moderator") || (comment.Moderated is null && userManager.GetUserId(User) == comment.AuthorId))
    {-->
        <!-- Button trigger modal -->
        <!--//Ties the button to the modal through the PK of the comment
        <button type="button" class="btn btn-warning" data-toggle="modal" data-target="#edit-@comment.Id">
            Edit Comment
        </button>-->

        <!-- Modal -->
        <!--//Same Id structure as the button
        <div class="modal fade" id="edit-@comment.Id" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="exampleModalLabel">Edit Comment</h5>
                        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>
                    <div class="modal-body">
                        <form asp-controller="Posts" asp-action="Edit" enctype="multipart/form-data">
                            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
                            //Properties that cannot be changed on the edit
                            <input type="hidden" asp-for="@comment.Id" />
                            <input type="hidden" asp-for="@comment.PostId" />
                            <input type="hidden" asp-for="@comment.AuthorId" />
                            <input type="hidden" asp-for="@comment.Created" />
                            //This allows for Admin/Mod to update the ModeratedBody and see the original comment
                            @if (User.IsInRole("Administrator") || User.IsInRole("Moderator"))
                            {
                                @Html.Raw(comment.Body)
                                <div class="form-group">
                                    <label asp-for="@comment.ModerationType" class="control-label"></label>
                                    <input asp-for="@comment.ModerationType" class="form-control" />
                                    <span asp-validation-for="@comment.ModerationType" class="text-danger"></span>
                                </div>
                                <div class="form-group">
                                    <label asp-for="@comment.ModeratedBody" class="control-label"></label>
                                    <input asp-for="@comment.ModeratedBody" class="form-control" />
                                    <span asp-validation-for="@comment.ModeratedBody" class="text-danger"></span>
                                </div>

                            }
                            //This lets the original author change what they wrote
                            else
                            {
                                <div class="form-group">
                                    <label asp-for="@comment.Body" class="control-label"></label>
                                    <input asp-for="@comment.Body" class="form-control" />
                                    <span asp-validation-for="@comment.Body" class="text-danger"></span>
                                </div>
                            }
                            <div class="form-group">
                                <input type="submit" value="Save" class="btn btn-primary" />
                            </div>
                        </form>

                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                    </div>
                </div>
            </div>
        </div>
    }-->
}



                }
}




